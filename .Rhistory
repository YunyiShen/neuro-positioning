if(!require(coda)) install.packages("coda")
source("./R/Neuro_helper.R")
bandwidth_list <- c(0.1,0.15,0.2)
width_list <- c(0.1,0.125,0.2,0.25,0.5)
amplitude <- 10
noisesd <- 0.3
set.seed(786)
n_rep <- 5
#n_data_set <- 150
n_data_set <- 2
cat("\n\nstart the simulation\n number of perception bandwidth:",
length(bandwidth_list),
"\n number of picture width:",
length(width_list),
"\n number of data sets for each setting:",
n_data_set,"\n\n")
for(bandwidth in bandwidth_list){
for(width in width_list){
a_post <- gamma_post <- y_c_post <- x_c_post <- sigma_post <-
matrix(NA,nrow = n_data_set,ncol = 500)
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
for(i in 1:n_data_set){
posi = runif(2)
cat("perception bandwidth =",bandwidth," picture width =",width," dataset number:",i,"\n\n")
simu_list <- lapply(1:n_rep,function(foo,posi,
bandwidth,
experimentxy,width,
amplitude,noisesd){
Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
},posi,
bandwidth,
experimentxy,width,
amplitude,noisesd
)
obs_list <- lapply(simu_list,cbind,experimentxy)
obs_mat <- Reduce(rbind,obs_list)
obs_mat <- obs_mat[,c(2,3,1)]
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=5000,burn_in=3000,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
a_post[i,] <- first_test$amplitude
gamma_post[i,] <- first_test$bandwidth
x_c_post[i,] <- first_test$posi[,1]
y_c_post[i,] <- first_test$posi[,2]
sigma_post[i,] <- first_test$noise
write.csv(a_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/a.csv"))
write.csv(gamma_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/gamma.csv"))
write.csv(x_c_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/x_c.csv"))
write.csv(y_c_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/y_c.csv"))
write.csv(sigma_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/sigma.csv"))
cat("\n\n")
}
}
}
if(!require(svMisc)) install.packages("svMisc")
if(!require(coda)) install.packages("coda")
source("./R/Neuro_helper.R")
bandwidth_list <- c(0.1,0.15,0.2)
width_list <- c(0.1,0.125,0.2,0.25,0.5)
amplitude <- 10
noisesd <- 0.3
set.seed(786)
n_rep <- 5
#n_data_set <- 150
n_data_set <- 2
cat("\n\nstart the simulation\n number of perception bandwidth:",
length(bandwidth_list),
"\n number of picture width:",
length(width_list),
"\n number of data sets for each setting:",
n_data_set,"\n\n")
for(bandwidth in bandwidth_list){
for(width in width_list){
a_post <- gamma_post <- y_c_post <- x_c_post <- sigma_post <-
matrix(NA,nrow = n_data_set,ncol = 5)
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
for(i in 1:n_data_set){
posi = runif(2)
cat("perception bandwidth =",bandwidth," picture width =",width," dataset number:",i,"\n\n")
simu_list <- lapply(1:n_rep,function(foo,posi,
bandwidth,
experimentxy,width,
amplitude,noisesd){
Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
},posi,
bandwidth,
experimentxy,width,
amplitude,noisesd
)
obs_list <- lapply(simu_list,cbind,experimentxy)
obs_mat <- Reduce(rbind,obs_list)
obs_mat <- obs_mat[,c(2,3,1)]
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=50,burn_in=3000,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
a_post[i,] <- first_test$amplitude
gamma_post[i,] <- first_test$bandwidth
x_c_post[i,] <- first_test$posi[,1]
y_c_post[i,] <- first_test$posi[,2]
sigma_post[i,] <- first_test$noise
write.csv(a_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/a.csv"))
write.csv(gamma_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/gamma.csv"))
write.csv(x_c_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/x_c.csv"))
write.csv(y_c_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/y_c.csv"))
write.csv(sigma_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/sigma.csv"))
cat("\n\n")
}
}
}
cat("\n\nstart the simulation\n number of perception bandwidth:",
length(bandwidth_list),
"\n number of picture width:",
length(width_list),
"\n number of data sets for each setting:",
n_data_set,"\n\n")
for(bandwidth in bandwidth_list){
for(width in width_list){
a_post <- gamma_post <- y_c_post <- x_c_post <- sigma_post <-
matrix(NA,nrow = n_data_set,ncol = 5)
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
for(i in 1:n_data_set){
posi = runif(2)
cat("perception bandwidth =",bandwidth," picture width =",width," dataset number:",i,"\n\n")
simu_list <- lapply(1:n_rep,function(foo,posi,
bandwidth,
experimentxy,width,
amplitude,noisesd){
Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
},posi,
bandwidth,
experimentxy,width,
amplitude,noisesd
)
obs_list <- lapply(simu_list,cbind,experimentxy)
obs_mat <- Reduce(rbind,obs_list)
obs_mat <- obs_mat[,c(2,3,1)]
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=50,burn_in=30,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
a_post[i,] <- first_test$amplitude
gamma_post[i,] <- first_test$bandwidth
x_c_post[i,] <- first_test$posi[,1]
y_c_post[i,] <- first_test$posi[,2]
sigma_post[i,] <- first_test$noise
write.csv(a_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/a.csv"))
write.csv(gamma_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/gamma.csv"))
write.csv(x_c_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/x_c.csv"))
write.csv(y_c_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/y_c.csv"))
write.csv(sigma_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/sigma.csv"))
cat("\n\n")
}
}
}
#n_data_set <- 150
n_data_set <- 1
cat("\n\nstart the simulation\n number of perception bandwidth:",
length(bandwidth_list),
"\n number of picture width:",
length(width_list),
"\n number of data sets for each setting:",
n_data_set,"\n\n")
for(bandwidth in bandwidth_list){
for(width in width_list){
a_post <- gamma_post <- y_c_post <- x_c_post <- sigma_post <-
matrix(NA,nrow = n_data_set,ncol = 5)
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
for(i in 1:n_data_set){
posi = runif(2)
cat("perception bandwidth =",bandwidth," picture width =",width," dataset number:",i,"\n\n")
simu_list <- lapply(1:n_rep,function(foo,posi,
bandwidth,
experimentxy,width,
amplitude,noisesd){
Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
},posi,
bandwidth,
experimentxy,width,
amplitude,noisesd
)
obs_list <- lapply(simu_list,cbind,experimentxy)
obs_mat <- Reduce(rbind,obs_list)
obs_mat <- obs_mat[,c(2,3,1)]
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=50,burn_in=30,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
a_post[i,] <- first_test$amplitude
gamma_post[i,] <- first_test$bandwidth
x_c_post[i,] <- first_test$posi[,1]
y_c_post[i,] <- first_test$posi[,2]
sigma_post[i,] <- first_test$noise
write.csv(a_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/a.csv"))
write.csv(gamma_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/gamma.csv"))
write.csv(x_c_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/x_c.csv"))
write.csv(y_c_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/y_c.csv"))
write.csv(sigma_post,paste0("./Simulations/Big_simu/bw_",bandwidth,"/w_",width,"/sigma.csv"))
cat("\n\n")
}
}
}
source("./R/Neuro_helper.R")
posi <- c(0.9,0.9)
bandwidth <- 0.2
width <- 0.1
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
amplitude <- 8
noisesd <- 0.3
large_simu <- Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
image(matrix(large_simu,sqrt(length(large_simu))))
obs_mat <- cbind(experimentxy,large_simu)
log_Lik_batch(obs_mat,posi[1],posi[2],
bandwidth,
width,
amplitude,
noisesd)
pred <- pred_batch(posi[1],posi[2],
bandwidth,
experimentxy,
width,
amplitude
)
source("./R/Neuro_helper.R")
bandwidth <- 0.1
width <- .2
posi <- c(.9,.9)
set.seed(786)
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
amplitude <- 10
noisesd <- 0.3
n_rep <- 5
simu_list <- lapply(1:n_rep,function(i,posi,
bandwidth,
experimentxy,width,
amplitude,noisesd){
Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
},posi,
bandwidth,
experimentxy,width,
amplitude,noisesd
)
Mean_response <- lapply(simu_list,function(w){
matrix(w,nrow = sqrt(length(w)))
})
Mean_response <- Reduce("+",Mean_response)
Mean_response <- Mean_response/n_rep
Mean_response <- Mean_response/sum(Mean_response)
image(Mean_response)
source("./R/Neuro_helper.R")
bandwidth <- 0.1
width <- .15
posi <- c(.9,.9)
set.seed(786)
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
amplitude <- 10
noisesd <- 0.3
n_rep <- 5
simu_list <- lapply(1:n_rep,function(i,posi,
bandwidth,
experimentxy,width,
amplitude,noisesd){
Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
},posi,
bandwidth,
experimentxy,width,
amplitude,noisesd
)
Mean_response <- lapply(simu_list,function(w){
matrix(w,nrow = sqrt(length(w)))
})
Mean_response <- Reduce("+",Mean_response)
Mean_response <- Mean_response/n_rep
Mean_response <- Mean_response/sum(Mean_response)
image(Mean_response)
obs_list <- lapply(simu_list,cbind,experimentxy)
obs_mat <- Reduce(rbind,obs_list)
obs_mat <- obs_mat[,c(2,3,1)]
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=5000,burn_in=3000,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
bandwidth <- 0.1
width <- .1
posi <- c(.9,.9)
set.seed(786)
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
amplitude <- 8
noisesd <- 0.3
n_rep <- 5
simu_list <- lapply(1:n_rep,function(i,posi,
bandwidth,
experimentxy,width,
amplitude,noisesd){
Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
},posi,
bandwidth,
experimentxy,width,
amplitude,noisesd
)
Mean_response <- lapply(simu_list,function(w){
matrix(w,nrow = sqrt(length(w)))
})
Mean_response <- Reduce("+",Mean_response)
Mean_response <- Mean_response/n_rep
Mean_response <- Mean_response/sum(Mean_response)
image(Mean_response)
obs_list <- lapply(simu_list,cbind,experimentxy)
obs_mat <- Reduce(rbind,obs_list)
obs_mat <- obs_mat[,c(2,3,1)]
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=5000,burn_in=3000,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
dev.off()
par(mfrow = c(1,2))
image(Mean_response,main = "mean response")
points(as.matrix(first_test$posi))
points(x = posi[1],y = posi[2],col = "red",pch = 18)
densplot(first_test$bandwidth,main = "bandwidth",show.obs = T,xlab = "")
abline(v = bandwidth,col = "red")
source("./R/Neuro_helper.R")
bandwidth <- 0.1
width <- .1
posi <- c(.97,.3)
set.seed(786)
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
amplitude <- 8
noisesd <- 0.3
n_rep <- 5
simu_list <- lapply(1:n_rep,function(i,posi,
bandwidth,
experimentxy,width,
amplitude,noisesd){
Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
},posi,
bandwidth,
experimentxy,width,
amplitude,noisesd
)
Mean_response <- lapply(simu_list,function(w){
matrix(w,nrow = sqrt(length(w)))
})
Mean_response <- Reduce("+",Mean_response)
Mean_response <- Mean_response/n_rep
Mean_response <- Mean_response/sum(Mean_response)
image(Mean_response)
obs_list <- lapply(simu_list,cbind,experimentxy)
obs_mat <- Reduce(rbind,obs_list)
obs_mat <- obs_mat[,c(2,3,1)]
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=5000,burn_in=3000,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
dev.off()
par(mfrow = c(1,2))
image(Mean_response,main = "mean response")
points(as.matrix(first_test$posi))
points(x = posi[1],y = posi[2],col = "red",pch = 18)
densplot(first_test$bandwidth,main = "bandwidth",show.obs = T,xlab = "")
abline(v = bandwidth,col = "red")
source("./R/Neuro_helper.R")
bandwidth <- 0.1
width <- .1
posi <- c(.97,.97)
set.seed(786)
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
amplitude <- 8
noisesd <- 0.3
n_rep <- 5
simu_list <- lapply(1:n_rep,function(i,posi,
bandwidth,
experimentxy,width,
amplitude,noisesd){
Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
},posi,
bandwidth,
experimentxy,width,
amplitude,noisesd
)
Mean_response <- lapply(simu_list,function(w){
matrix(w,nrow = sqrt(length(w)))
})
Mean_response <- Reduce("+",Mean_response)
Mean_response <- Mean_response/n_rep
Mean_response <- Mean_response/sum(Mean_response)
image(Mean_response)
obs_list <- lapply(simu_list,cbind,experimentxy)
obs_mat <- Reduce(rbind,obs_list)
obs_mat <- obs_mat[,c(2,3,1)]
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=5000,burn_in=3000,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
dev.off()
par(mfrow = c(1,2))
image(Mean_response,main = "mean response")
points(as.matrix(first_test$posi))
points(x = posi[1],y = posi[2],col = "red",pch = 18)
densplot(first_test$bandwidth,main = "bandwidth",show.obs = T,xlab = "")
abline(v = bandwidth,col = "red")
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=5000,burn_in=3000,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
head(obs_mat)
max(obs_mat\[,3])
max(obs_mat[,3])
hist(obs_mat[,3])
noisesd_curr
obs_mat[obs_mat[,3]>noisesd_curr,3]
sd(obs_mat[,3])
?dist
source("./R/Neuro_helper.R")
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=5000,burn_in=3000,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
noisesd_curr
bandwidth
bandwidth_curr
amplitude_curr
?pnorm
pnorm(width,0,bandwidth) - pnorm(-width,0,bandwidth)
source("./R/Neuro_helper.R")
source("./R/Neuro_helper.R")
source("./R/Neuro_helper.R")
bandwidth <- 0.1
width <- .2
posi <- c(.3,.5)
set.seed(786)
experimentxy <- as.matrix( expand.grid(seq(0,1,width),seq(0,1,width)))
amplitude <- 10
noisesd <- 0.3
n_rep <- 5
simu_list <- lapply(1:n_rep,function(i,posi,
bandwidth,
experimentxy,width,
amplitude,noisesd){
Simu_data_batch(posi[1],posi[2],
bandwidth,
experimentxy,width,
amplitude,noisesd)
},posi,
bandwidth,
experimentxy,width,
amplitude,noisesd
)
Mean_response <- lapply(simu_list,function(w){
matrix(w,nrow = sqrt(length(w)))
})
Mean_response <- Reduce("+",Mean_response)
Mean_response <- Mean_response/n_rep
Mean_response <- Mean_response/sum(Mean_response)
image(Mean_response)
obs_list <- lapply(simu_list,cbind,experimentxy)
obs_mat <- Reduce(rbind,obs_list)
obs_mat <- obs_mat[,c(2,3,1)]
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=5000,burn_in=3000,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
first_test <- Main_sampler(obs_mat, width, alpha = 1, beta = 1, prior_xy = prior_xy_unif,
n_iter=5000,burn_in=3000,
thin_by = 10,prop_sd_posi = 0.01, # change this to 0.05 if it does not work
prop_sd_amplitude = .5,
prop_sd_bandwidth = 0.01)
amplitude_curr
obs_mat[obs_mat[,3]==max(obs_mat[,3]),1:2]
posi_curr <- obs_mat[obs_mat[,3]==max(obs_mat[,3]),1:2] # initial position
